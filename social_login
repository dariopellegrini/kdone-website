---
layout: default
title: Social Login
parent: Users
nav_order: 3
---

# Social login

Login via password is not the only login supported by KDone.  
Apple, Google and Facebook login are supported through `userModule` DSL.

## Apple
In order to configure login with Apple, app [bundle ID](https://developer.apple.com/documentation/appstoreconnectapi/bundle_ids) must be specified in `apple` configuration function inside the DSL function.

```kotlin
userModule<User> {
   apple("<bundleID>")
}
```

This will open a single API for signup and login. KDone will use e-mail provided by Apple as username and will recognise if that username is already signed up or not.

Endpoint `apple/access`

Method `POST`

Body
```json
{
   "username":"giovanni.games@icloud.com",
   "name": "Giovanni",
   "surname": "Games",
   "nickname": "giovannigames"
}
```
Request headers
```
appleToken: <Apple token from sign in with Apple>
appleId: <Apple ID from sign in with Apple>
```

Result headers
```
Authorization: <token>
```

Result body
```json
{
   "username":"giovanni.games@icloud.com",
   "name": "Giovanni",
   "surname": "Games",
   "nickname": "giovannigames",
   "_id": "5dfbaa6f82ec6d71f9b2201d",
   "role": null,
}
```

> Apple social login only works with iOS apps that implement Sign in with Apple. With other clients token should be generated by following [Apple docs](https://developer.apple.com/documentation/sign_in_with_apple/generate_and_validate_tokens).

## Google

In order to configure login with Google, sign in with Google must be configured, typically through an SDK. Check on (Google Developers website)[https://developers.google.com] for further details.  
Once Google sign in and SDK are set up, KDone can be configured to perform login with Google accounts.

```kotlin
userModule<User> {
   google("<Google client ID>", "<Google client secret>", "<Google redirect URL>")
}
```

This will open a single API for signup and login. KDone will use e-mail provided as username and will recognise if that username is already signed up or not.

Endpoint `google/access`

Method `POST`

Body
```json
{
   "username":"giovanni.games@icloud.com",
   "name": "Giovanni",
   "surname": "Games",
   "nickname": "giovannigames"
}
```
Request headers
```
googleToken: <Google token from Google SDK>
googleId: <Google ID from Google SDK>
```

Result headers
```
Authorization: <token>
```

Result body
```json
{
   "username":"giovanni.games@icloud.com",
   "name": "Giovanni",
   "surname": "Games",
   "nickname": "giovannigames",
   "_id": "5dfbaa6f82ec6d71f9b2201d",
   "role": null,
}
```

## Facebook

In order to configure login with Facebook, login with Facebook must be configured, typically through an SDK. Check on (Facebook Developers website)[https://developers.facebook.com] for further details.  
Once Facebook login and its SDK are set up, KDone can be configured to perform login with Facebook.

```kotlin
userModule<User> {
   Facebook("<Facebook app ID>", "<Facebook secret>")
}
```

This will open a single API for signup and login. KDone will use e-mail provided e-mail provided as username and will recognise if that username is already signed up or not.

Endpoint `facebook/access`

Method `POST`

Body
```json
{
   "username":"giovanni.games@icloud.com",
   "name": "Giovanni",
   "surname": "Games",
   "nickname": "giovannigames"
}
```
Request headers
```
facebookToken: <Facebook token from Facebook SDK>
facebookId: <Facebook ID from Facebook SDK>
```

Result headers
```
Authorization: <token>
```

Result body
```json
{
   "username":"giovanni.games@icloud.com",
   "name": "Giovanni",
   "surname": "Games",
   "nickname": "giovannigames",
   "_id": "5dfbaa6f82ec6d71f9b2201d",
   "role": null,
}
```
